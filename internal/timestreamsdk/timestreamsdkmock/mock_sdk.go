// Code generated by MockGen. DO NOT EDIT.
// Source: sdk.go

// Package timestreamsdkmock is a generated GoMock package.
package timestreamsdkmock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	timestreamwrite "github.com/aws/aws-sdk-go/service/timestreamwrite"
	gomock "github.com/golang/mock/gomock"
)

// MockTimestreamWriteIface is a mock of TimestreamWriteIface interface.
type MockTimestreamWriteIface struct {
	ctrl     *gomock.Controller
	recorder *MockTimestreamWriteIfaceMockRecorder
}

// MockTimestreamWriteIfaceMockRecorder is the mock recorder for MockTimestreamWriteIface.
type MockTimestreamWriteIfaceMockRecorder struct {
	mock *MockTimestreamWriteIface
}

// NewMockTimestreamWriteIface creates a new mock instance.
func NewMockTimestreamWriteIface(ctrl *gomock.Controller) *MockTimestreamWriteIface {
	mock := &MockTimestreamWriteIface{ctrl: ctrl}
	mock.recorder = &MockTimestreamWriteIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimestreamWriteIface) EXPECT() *MockTimestreamWriteIfaceMockRecorder {
	return m.recorder
}

// WriteRecordsWithContext mocks base method.
func (m *MockTimestreamWriteIface) WriteRecordsWithContext(ctx context.Context, input *timestreamwrite.WriteRecordsInput, opts ...request.Option) (*timestreamwrite.WriteRecordsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, input}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WriteRecordsWithContext", varargs...)
	ret0, _ := ret[0].(*timestreamwrite.WriteRecordsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteRecordsWithContext indicates an expected call of WriteRecordsWithContext.
func (mr *MockTimestreamWriteIfaceMockRecorder) WriteRecordsWithContext(ctx, input interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, input}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteRecordsWithContext", reflect.TypeOf((*MockTimestreamWriteIface)(nil).WriteRecordsWithContext), varargs...)
}
