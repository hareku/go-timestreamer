// Code generated by MockGen. DO NOT EDIT.
// Source: sdk.go

// Package snssdkmock is a generated GoMock package.
package snssdkmock

import (
	reflect "reflect"

	aws "github.com/aws/aws-sdk-go/aws"
	request "github.com/aws/aws-sdk-go/aws/request"
	sns "github.com/aws/aws-sdk-go/service/sns"
	gomock "github.com/golang/mock/gomock"
)

// MockSNSIface is a mock of SNSIface interface.
type MockSNSIface struct {
	ctrl     *gomock.Controller
	recorder *MockSNSIfaceMockRecorder
}

// MockSNSIfaceMockRecorder is the mock recorder for MockSNSIface.
type MockSNSIfaceMockRecorder struct {
	mock *MockSNSIface
}

// NewMockSNSIface creates a new mock instance.
func NewMockSNSIface(ctrl *gomock.Controller) *MockSNSIface {
	mock := &MockSNSIface{ctrl: ctrl}
	mock.recorder = &MockSNSIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSNSIface) EXPECT() *MockSNSIfaceMockRecorder {
	return m.recorder
}

// PublishWithContext mocks base method.
func (m *MockSNSIface) PublishWithContext(arg0 aws.Context, arg1 *sns.PublishInput, arg2 ...request.Option) (*sns.PublishOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishWithContext", varargs...)
	ret0, _ := ret[0].(*sns.PublishOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishWithContext indicates an expected call of PublishWithContext.
func (mr *MockSNSIfaceMockRecorder) PublishWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishWithContext", reflect.TypeOf((*MockSNSIface)(nil).PublishWithContext), varargs...)
}
