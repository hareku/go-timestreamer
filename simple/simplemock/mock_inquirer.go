// Code generated by MockGen. DO NOT EDIT.
// Source: inquirer.go

// Package simplemock is a generated GoMock package.
package simplemock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	simple "github.com/hareku/go-timestreamer/simple"
)

// MockInquirer is a mock of Inquirer interface.
type MockInquirer struct {
	ctrl     *gomock.Controller
	recorder *MockInquirerMockRecorder
}

// MockInquirerMockRecorder is the mock recorder for MockInquirer.
type MockInquirerMockRecorder struct {
	mock *MockInquirer
}

// NewMockInquirer creates a new mock instance.
func NewMockInquirer(ctrl *gomock.Controller) *MockInquirer {
	mock := &MockInquirer{ctrl: ctrl}
	mock.recorder = &MockInquirerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInquirer) EXPECT() *MockInquirerMockRecorder {
	return m.recorder
}

// PerDay mocks base method.
func (m *MockInquirer) PerDay(ctx context.Context, in simple.PerDayInput) ([]simple.RecordOfDay, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PerDay", ctx, in)
	ret0, _ := ret[0].([]simple.RecordOfDay)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PerDay indicates an expected call of PerDay.
func (mr *MockInquirerMockRecorder) PerDay(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PerDay", reflect.TypeOf((*MockInquirer)(nil).PerDay), ctx, in)
}
